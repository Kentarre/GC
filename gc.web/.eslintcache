[{"/Users/life/Documents/dev/GC/gc.web/src/index.js":"1","/Users/life/Documents/dev/GC/gc.web/src/App.js":"2"},{"size":266,"mtime":1608131879101,"results":"3","hashOfConfig":"4"},{"size":2879,"mtime":1608131420829,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1ti5jhs",{"filePath":"9","messages":"10","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/life/Documents/dev/GC/gc.web/src/index.js",[],["12","13"],"/Users/life/Documents/dev/GC/gc.web/src/App.js",["14","15"],"import './App.css';\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Container, Row, Col, Button, ButtonGroup } from 'react-bootstrap';\nimport Spinner from 'react-bootstrap/Spinner'\n\nfunction App() {\n  const [ connection, setConnection ] = useState(null);\n  const [ challenge, setChallenge ] = useState('');\n  const [ game, setGame ] = useState({userScore: 0});\n  const [ clients, setClients ] = useState(0);\n  const [ disabled, setDisabled ] = useState(true);\n\n  useEffect(() => {\n    const con = new HubConnectionBuilder()\n        .withUrl('https://localhost:8195/game')\n        .withAutomaticReconnect()\n        .build();\n\n    setConnection(con);\n}, []);\n\nuseEffect(() => {\n    if (connection){\n        connection.start()\n            .then(r => {\n                connection.on('NewChallenge', state => {\n                    setChallenge(state);\n                    setDisabled(false);\n                });\n\n                connection.on('OnMessageCheck', state => {\n                    setGame(state);\n                });\n\n                connection.on('ClientCounterChanged', state => {\n                    setClients(state);\n                });\n            })\n            .catch(e => console.log('Connection failed: ', e));\n    }\n}, [connection]);\n\nconst sendAnswer = async (answer) => {\n    if (connection.connectionStarted){\n        await connection.invoke('OnMessageReceived', { Answer: answer, UserScore: game.userScore});\n    }\n}\n\nconst resetState = async () => {\n    if (connection.connectionStarted){\n        await connection.invoke('SendNewChallenge');\n    }\n}\n\nconst background = {\n  backgroundColor: '#282c34',\n  color: 'white'\n}\n\nfunction renderButtons(challenge){\n  if (challenge === ''){\n    if (!connection || !connection.connectionStarted){\n      return(<a>Connecting...</a>)\n    }\n    return (\n    <ButtonGroup aria-label=\"Basic example\">\n      <Button variant=\"outline-light\" onClick={resetState}>Start</Button>\n    </ButtonGroup>);\n  }else{\n    if (disabled){\n      return(<Spinner animation=\"grow\" />);\n    }else{\n      return (\n      <ButtonGroup aria-label=\"Basic example\">\n        <Button variant=\"outline-light\" onClick={() => {sendAnswer(0); setDisabled(true);}} disabled={disabled}>Correct</Button>\n        <Button variant=\"outline-light\" onClick={() => {sendAnswer(1); setDisabled(true);}} disabled={disabled}>Not Correct</Button>\n      </ButtonGroup>)\n    };\n  }\n}\n\nreturn (\n    <div className=\"App\">\n      <header style={background}>\n        <Container>\n          <Row>\n            <Col>Clients: {clients}</Col>\n            <Col>Score: {game.userScore}</Col>\n          </Row>\n        </Container>\n      </header>\n      <header className=\"App-header\">\n      <h1>{challenge}</h1>\n        {renderButtons(challenge)}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"16","replacedBy":"17"},{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","severity":1,"message":"21","line":3,"column":38,"nodeType":"22","messageId":"23","endLine":3,"endColumn":44},{"ruleId":"24","severity":1,"message":"25","line":64,"column":14,"nodeType":"26","endLine":64,"endColumn":17},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]